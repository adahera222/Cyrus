{\rtf1\ansi\ansicpg1252\cocoartf1038\cocoasubrtf360
{\fonttbl\f0\fnil\fcharset0 Monaco;}
{\colortbl;\red255\green255\blue255;\red77\green77\blue77;\red0\green0\blue174;\red0\green0\blue181;
}
\deftab560
\pard\pardeftab560\ql\qnatural

\f0\fs18 \cf2 "open -a 'Audio MIDI Setup'"\cf0 .unixCmd;\
\
(\
	s = Server.default;\
	o = Server.default.options;\
		\
	// normally - listen to the microphone\
	//o.inDevice = "Build-in Input";\
	// for now - listen to itunes\
	o.inDevice = "Soundflower (2ch)";\
\
	// when soundflower is set as OS default output I want to pass music through here...\
	o.outDevice = "Built-in Output";\
	\
	// go\
	s.boot;	\
)\
\
(\
	var	fftsize = 128;\
	\
	// because I keep restarting this chunk\
	s.freeAll;\
	\
	\{\
		var chain, dem;\
\
		chain = \cf3 FFT\cf0 (\
			\cf3 LocalBuf\cf0 (fftsize), \
			\cf4 SoundIn\cf0 .ar(0), \
			1.0, 1);\
		\
		dem = Demand.kr(\
		\
			// trigger: demand data when chain is >= 0\
			chain>=0,\
			\
			// reset: not used\
			0, \
			\
			// Demand can't deal with more then 32 bins (64 numbers), \
			// so we have to restrict the portion of the spectrum to send			\
			UnpackFFT(chain, fftsize, frombin:0, tobin: 32));\
		\
		// now actually send data to all subscribed clients\
		// uses the same trigger signal\
		SendReply.kr(chain>=0,"/spectrum",[ dem ]);\
	\}.play;\
	\
)\
\
// debugging: print server replies\
d = OSCresponder(s.addr, "/spectrum", \{ |t,r,msg| msg.postln; \}).add;	\
\
// silence the debug receiver\
d.remove;\
\
// Stop the process without killing the server\
s.freeAll;\
\
NetAddr("localhost",6666).sendMsg("/hello");\
NetAddr("localhost",6666).sendMsg("/hello", "world", 666);\
\
s.dumpOSC(1);\
s.dumpOSC(0);\
}